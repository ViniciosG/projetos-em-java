/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package principal.view;

import Ferramentas.InternalFrame.GFrame;
import Ferramentas.Managers.Managers;
import Ferramentas.Mensagem.Mensagem;
import boletos.BoletosPendentes;
import clientes.CadastrarClientesBoleto;
import boletos.GerarBoletos;
import boletos.GerarEmail;
import clientes.EditarClientes;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.EntityManager;
import javax.swing.JDesktopPane;
import javax.swing.JFileChooser;
import org.apache.commons.lang3.StringUtils;
import principal.models.TbBoletosGerados;
import retorno.Retorno;

/**
 *
 * @author ANDRE PORTO
 */
public class Principal extends javax.swing.JFrame {
    //  public static JDesktopPane desktop;

    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
        setTitle("CLIENTES VIRTUAL SUPER");
        setExtendedState(MAXIMIZED_BOTH);
        this.setIconImage(Toolkit.getDefaultToolkit().createImage(getClass().getResource("/imagens/icone.png")));
    //    List<Boletos> lBoleto=new ArrayList();

//        
//        Boletos b = new Boletos();
//        b.setDtDocumento(new Date());
//        b.setDtVencimento(new Date());
//        b.setCdBancoDestinatario("teste");
//        b.setCdBeneficiario("teste");
//        b.setNrCpfBeneficiario("123456789");
//        b.setDsBairroBeneficiario("teste");
//        b.setDsBeneficiario("teste");
//        b.setDsCepBeneficiario("teste");
//        b.setDsEndBeneficiario("teste");
//        b.setDsLinhaDigitavel("34191.09008 00014.920235 68342.060008 1 69430000050000");
//        b.setDsMunicipioBeneficiario("teste");
//        b.setDsMunicipioBeneficiario("teste");
//        b.setDsInstrucao1(null);
//        b.setDsInstrucao2(null);
//        b.setDsInstrucao3(null);
//        b.setNrDocumento(null);
//        b.setDsEspecieDocumento(null);
//        b.setDsAceite(null);
//        b.setDtProcessamento(null);
//        b.setNrNossoNumero(null);
//        b.setVlDocumento(BigDecimal.ZERO);
//        lBoleto.add(b);
//        GerarRelatorio r = new GerarRelatorio();
//        try {
//            r.print("teste ", "/novoTeste/boleto.jasper", lBoleto, null);
//            
//            //desktop = new JDesktopPaneComImagem("/imagens/principal.png");
//        } catch (Exception ex) {
//            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }

    public class JDesktopPaneComImagem extends JDesktopPane {

        private static final long serialVersionUID = 1L;
        Image imagem;

        public JDesktopPaneComImagem(String caminho) {
            imagem = Toolkit.getDefaultToolkit().createImage(getClass().getResource(caminho));
        }

        @Override
        public void paintComponent(Graphics g) {
            super.paintComponent(g);
            if (imagem != null) {
                g.drawImage(imagem, 0, 0, this.getWidth(), this.getHeight(), this);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        desktop = new JDesktopPaneComImagem("/imagens/principal.png");
        rodape = new javax.swing.JProgressBar();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        s = new javax.swing.JRadioButtonMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        desktop.setBackground(new java.awt.Color(204, 204, 204));

        javax.swing.GroupLayout desktopLayout = new javax.swing.GroupLayout(desktop);
        desktop.setLayout(desktopLayout);
        desktopLayout.setHorizontalGroup(
            desktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        desktopLayout.setVerticalGroup(
            desktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 450, Short.MAX_VALUE)
        );

        jMenu1.setText("Clientes");

        jMenuItem1.setText("Cadastrar");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Editar");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Boletos");

        jMenuItem3.setText("Gerar");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuItem4.setText("Visualizar Pendentes");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        s.setSelected(true);
        s.setText("Enviar para Email");
        s.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sActionPerformed(evt);
            }
        });
        jMenu2.add(s);
        s.getAccessibleContext().setAccessibleName("Enviar para Email");

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Contratos");

        jMenuItem5.setText("Visualizar");
        jMenu3.add(jMenuItem5);

        jMenuBar1.add(jMenu3);

        jMenu4.setText("Arquivos");

        jMenuItem6.setText("Remessa");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem6);

        jMenuItem7.setText("Retorno");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem7);

        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktop)
            .addComponent(rodape, javax.swing.GroupLayout.DEFAULT_SIZE, 674, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(desktop)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rodape, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        GFrame.addInternalFrame(false, CadastrarClientesBoleto.class);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        GFrame.addInternalFrame(true, GerarBoletos.class);

    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        GFrame.addInternalFrame(true, BoletosPendentes.class);

    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
         JFileChooser file = new JFileChooser();
        file.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (file.showDialog(file, "Gerar") == 0) {
            File files = file.getSelectedFile();
            
            EntityManager em = Managers.GetManager();

            try {
                SimpleDateFormat formatRem = new SimpleDateFormat("ddMMyy");
                 File diretorio = new File(files+"/"+formatRem.format(new Date()));
            if (!diretorio.exists()) {
                diretorio.mkdirs();
            }
            System.out.println("filess"+diretorio);
                //FileWriter arq = new FileWriter("c:/remessas" + formatRem.format(new Date()) + ".txt");
                FileWriter arq = new FileWriter(diretorio+"/remessa.txt");
                PrintWriter gravarArq = new PrintWriter(arq);
                StringBuilder builder = new StringBuilder();
                builder.append("0");                                            //TIPO DE REGISTRO ; IDENTIFICAÇÃO DO REGISTRO HEADER
                builder.append("1");                                            //OPERAÇÃO ; TIPO DE OPERAÇÃO - REMESSA
                builder.append("REMESSA");                                      //LITERAL DE REMESSA  ; IDENTIFICAÇÃO POR EXTENSO DO MOVIMENTO
                builder.append("01");                                           //CÓDIGO DO SERVIÇO  ; IDENTIFICAÇÃO DO TIPO DE SERVIÇO
                builder.append(StringUtils.rightPad("COBRANCA", 15, " "));      //LITERAL DE SERVIÇO  ; IDENTIFICAÇÃO POR EXTENSO DO TIPO DE SERVIÇO
                builder.append("0236");                                         //AGÊNCIA  ; AGÊNCIA MANTENEDORA DA CONTA
                builder.append("00");                                           //ZEROS  ; COMPLEMENTO DE REGISTRO 
                builder.append("83420");                                        //CONTA  ; NÚMERO DA CONTA CORRENTE DA EMPRESA 
                builder.append("6");                                            //DAC  ; DÍGITO DE AUTO CONFERÊNCIA AG/CONTA EMPRESA 
                builder.append(StringUtils.rightPad("", 8, " "));               //BRANCOS  ; COMPLEMENTO DO REGISTRO
                builder.append("VIRTUAL SUPER SOL. TECNO. LTDA");               //NOME DA EMPRESA  ; NOME POR EXTENSO DA "EMPRESA MÃE"
                builder.append("341");                                          //CÓDIGO DO BANCO  ; Nº DO BANCO NA CÂMARA DE COMPENSAÇÃO
                builder.append("BANCO ITAU SA  ");                              //NOME DO BANCO   ; NOME POR EXTENSO DO BANCO COBRADOR
                builder.append(formatRem.format(new Date()));                   //DATA DE GERAÇÃO   ; DATA DE GERAÇÃO DO ARQUIVO ;DDMMAA
                builder.append(StringUtils.rightPad("", 294, " "));             //BRANCOS   ; COMPLEMENTO DO REGISTRO
                builder.append("000001");                                       //NÚMERO SEQÜENCIAL ; NÚMERO SEQÜENCIAL DO REGISTRO NO ARQUIVO
                gravarArq.println(builder);
                List<TbBoletosGerados> lBoletos = em.createQuery("SELECT t from TbBoletosGerados t WHERE t.inEnviadoRemessa=?1 and t.dtVencimento >=?2").setParameter(1, false).setParameter(2, new Date()).getResultList();
                int cont = 2;
                BigDecimal vlBoletos = BigDecimal.ZERO;
                for (TbBoletosGerados b : lBoletos) {
                    b.setInEnviadoRemessa(true);
                    StringBuilder reme = new StringBuilder();
                    reme.append("1");                                                //TIPO DE REGISTRO ; IDENTIFICAÇÃO DO REGISTRO TRANSAÇÃO
                    reme.append("02");                                               //CÓDIGO DE INSCRIÇÃO ; TIPO DE INSCRIÇÃO DA EMPRESA
                    reme.append("13933645000129");//dados da virtual                 //NÚMERO DE INSCRIÇÃO ; Nº DE INSCRIÇÃO DA EMPRESA (CPF/CNPJ)
                    reme.append("0236");          //dados da virtual                 //AGÊNCIA ; AGÊNCIA MANTENEDORA DA CONTA
                    reme.append("00");                                               //ZEROS ; COMPLEMENTO DE REGISTRO 
                    reme.append("83420");         //dados da virtual                 //CONTA ; NÚMERO DA CONTA CORRENTE DA EMPRESA
                    reme.append("6");            //dados da virtual                  //DAC ; DÍGITO DE AUTO CONFERÊNCIA AG/CONTA EMPRESA
                    reme.append(StringUtils.rightPad("", 4, " "));                   //BRANCOS ; COMPLEMENTO DE REGISTRO
                    reme.append("0000");                                             //INSTRUÇÃO/ALEGAÇÃO ; CÓD.INSTRUÇÃO/ALEGAÇÃO A SER CANCELADA
                    reme.append((StringUtils.rightPad(b.getContratoId().getClienteId().getNrCpfCnpj14(), 14) + "-  " + b.getNrNossoNumero()));             //USO DA EMPRESA  ; IDENTIFICAÇÃO DO TÍTULO NA EMPRESA
                    reme.append(String.valueOf(b.getNrNossoNumero()));                               //NOSSO NÚMERO  ; IDENTIFICAÇÃO DO TÍTULO NO BANCO
                    reme.append(StringUtils.rightPad("0", 13, "0"));                                    //QTDE DE MOEDA ; QUANTIDADE DE MOEDA VARIÁVEL
                    reme.append("109");                                              //Nº DA CARTEIRA ; NÚMERO DA CARTEIRA NO BANCO
                    reme.append(StringUtils.rightPad("", 21, " "));                  //USO DO BANCO ; IDENTIFICAÇÃO DA OPERAÇÃO NO BANCO
                    reme.append("I");                                                //CARTEIRA ; CÓDIGO DA CARTEIRA 
                    reme.append("01");                                               //CÓD. DE OCORRÊNCIA ; IDENTIFICAÇÃO DA OCORRÊNCIA
                    reme.append(StringUtils.rightPad(b.getNrNossoNumero(), 10));                        //Nº DO DOCUMENTO ; Nº DO DOCUMENTO DE COBRANÇA (DUPL.,NP ETC.) 
                    reme.append(formatRem.format(b.getDtVencimento()));              //VENCIMENTO ; DATA DE VENCIMENTO DO TÍTULO 
                    vlBoletos = vlBoletos.add(b.getVlBoleto());
                    reme.append(StringUtils.leftPad(b.getVlBoleto().toString().replaceAll("[^0-9]", ""), 13, "0"));  //VALOR DO TÍTULO ; VALOR NOMINAL DO TÍTULO
                    reme.append("341");                                              //CÓDIGO DO BANCO  ; Nº DO BANCO NA CÂMARA DE COMPENSAÇÃO
                    reme.append("00000");                                            //AGÊNCIA COBRADORA  ; AGÊNCIA ONDE O TÍTULO SERÁ COBRADO
                    reme.append("08");                                               //ESPÉCIE  ; ESPÉCIE DO TÍTULO 
                    reme.append("A");                                                //ACEITE  ; IDENTIFICAÇÃO DE TÍTULO ACEITO OU NÃO ACEITO 
                    reme.append(formatRem.format(b.getDtProcessado()));                                //DATA DE EMISSÃO  ; DATA DA EMISSÃO DO TÍTULO
                    reme.append("43");                                               //INSTRUÇÃO 1   ; 1ª INSTRUÇÃO DE COBRANÇA
                    reme.append("39");                                               //INSTRUÇÃO 2   ; 2ª INSTRUÇÃO DE COBRANÇA
                    reme.append(StringUtils.leftPad("0", 13, "0"));                        //JUROS DE 1 DIA ; VALOR DE MORA POR DIA DE ATRASO
                    reme.append(StringUtils.leftPad("0", 6, "0"));                         //DESCONTO ATÉ ; DATA LIMITE PARA CONCESSÃO DE DESCONTO 
                    reme.append(StringUtils.leftPad("0", 13, "0"));                        //VALOR DO DESCONTO ; VALOR DO DESCONTO A SER CONCEDIDO
                    reme.append(StringUtils.leftPad("0", 13, "0"));                        //VALOR DO I.O.F. ; VALOR DO I.O.F. RECOLHIDO P/ NOTAS SEGURO
                    reme.append(StringUtils.leftPad("0", 13, "0"));                        //ABATIMENTO ; VALOR DO ABATIMENTO A SER CONCEDIDO
                    reme.append(b.getContratoId().getClienteId().getNrCpfCnpj14().trim().length() == 11 ? "01" : "02");         //CÓDIGO DE INSCRIÇÃO ; IDENTIFICAÇÃO DO TIPO DE INSCRIÇÃO/PAGADOR ;01=CPF 02=CNPJ
                    reme.append(StringUtils.rightPad(b.getContratoId().getClienteId().getNrCpfCnpj14(), 14));  //NÚMERO DE INSCRIÇÃO ; Nº DE INSCRIÇÃO DO PAGADOR  (CPF/CNPJ)
                    reme.append(StringUtils.rightPad(b.getContratoId().getClienteId().getDsCliente(), 40));    //NOME ; NOME DO PAGADOR + BRANCOS ; COMPLEMENTO DE REGISTRO
                    reme.append(StringUtils.rightPad(b.getContratoId().getClienteId().getDsLogradouro(), 40)); //LOGRADOURO ; RUA, NÚMERO E COMPLEMENTO DO PAGADOR 
                    reme.append(StringUtils.rightPad(b.getContratoId().getClienteId().getDsBairro(), 12));     //BAIRRO ; BAIRRO DO PAGADOR 
                    reme.append(StringUtils.rightPad(b.getContratoId().getClienteId().getDsCep(), 8));        //CEP ; CEP DO PAGADOR
                    reme.append(StringUtils.rightPad(b.getContratoId().getClienteId().getDsMunicipio(), 15));  //CIDADE ; CIDADE DO PAGADOR
                    reme.append(StringUtils.rightPad(b.getContratoId().getClienteId().getDsUf(), 2));         //ESTADO ; UF DO PAGADOR
                    reme.append(StringUtils.rightPad("", 30, " "));                   //SACADOR/AVALISTA ; NOME DO SACADOR OU AVALISTA
                    reme.append(StringUtils.rightPad("", 4, " "));                                             //BRANCOS ; COMPLEMENTO DO REGISTRO 
                    reme.append(formatRem.format(b.getDtProcessado()));              //DATA DE MORA ; DATA DE MORA 
                    reme.append("10");                                               //PRAZO; QUANTIDADE DE DIAS 
                    reme.append(" ");                                                //BRANCOS; COMPLEMENTO DO REGISTRO 
                    reme.append(StringUtils.leftPad(String.valueOf(cont), 6, "0"));                                           //NÚMERO SEQÜENCIAL ; Nº SEQÜENCIAL DO REGISTRO NO ARQUIVO 
                    cont++;
                    gravarArq.println(reme);
                    em.merge(b);
                }

                StringBuilder trailer = new StringBuilder();
                trailer.append("9");
                trailer.append(StringUtils.rightPad("", 393, " "));
                trailer.append(StringUtils.leftPad(String.valueOf(cont), 6, "0"));
                gravarArq.println(trailer);

                em.getTransaction().begin();
                em.getTransaction().commit();

                arq.close();
                Mensagem.show(Mensagem.REMESSA);
            } catch (IOException ex) {
                Logger.getLogger(GerarBoletos.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // TODO add your handling code here:
        GFrame.addInternalFrame(true, Retorno.class);

    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        GFrame.addInternalFrame(true, EditarClientes.class);

    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void sActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sActionPerformed
        GFrame.addInternalFrame(true, GerarEmail.class);
    }//GEN-LAST:event_sActionPerformed

////    /**
////     * @param args the command line arguments
////     */
////    public static void main(String args[]) {
////        /* Set the Nimbus look and feel */
////        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
////        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
////         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
////         */
////        try {
////            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
////                if ("Nimbus".equals(info.getName())) {
////                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
////                    break;
////                }
////            }
////        } catch (ClassNotFoundException ex) {
////            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
////        } catch (InstantiationException ex) {
////            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
////        } catch (IllegalAccessException ex) {
////            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
////        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
////            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
////        }
////        //</editor-fold>
////
////        /* Create and display the form */
////        java.awt.EventQueue.invokeLater(new Runnable() {
////            public void run() {
////                new Principal().setVisible(true);
////            }
////        });
////    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JDesktopPane desktop;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    public static javax.swing.JProgressBar rodape;
    private javax.swing.JRadioButtonMenuItem s;
    // End of variables declaration//GEN-END:variables
}
